# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
user nginx;
daemon off;
#worker_processes 1;
worker_processes ${{NUM_WORKERS}};

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log  logs/error.log  notice;

#pid        logs/nginx.pid;
pid logs/nginx.pid;

events {
    worker_connections  10240;
}

http {
    include       mime.types;
    # default_type  application/octet-stream;
    resolver 8.8.8.8  valid=10s;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    # client_body_temp_path /var/run/openresty/nginx-client-body;
    # proxy_temp_path       /var/run/openresty/nginx-proxy;
    # fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    # uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    # scgi_temp_path        /var/run/openresty/nginx-scgi;

    client_body_temp_path  temp/client-body;
    proxy_temp_path        temp/proxy;
    fastcgi_temp_path      temp/fastcgi;
    uwsgi_temp_path        temp/uwsgi;
    scgi_temp_path         temp/scgi; 

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_shared_dict ${{CACHE_SHM_NAME}} 15m;
    lua_shared_dict ${{CACHE_NAME_MISS}} 1m;
    lua_shared_dict ${{CACHE_IPC_SHM}} 1m;

    lua_package_path "${{LUA_PATH}};;";
    lua_package_cpath "${{LUA_CPATH}};;";

    lua_code_cache ${{CODE_CACHE}};

    init_by_lua_block {
        require("nginx.nginx").init()
    }

    init_worker_by_lua_block {
        require("nginx.nginx").init_worker()
    }

    # 外部网络
    server {
        listen ${{PORT}};

        # 主功能
        location / {
            default_type application/json;
            access_by_lua_block {
                require("nginx.nginx").access_auth()
            }
            content_by_lua_block {
                require("lapis").serve("app")
            }
            set $_url "";
        }

        location /proxy {
            internal;
            rewrite_by_lua_block {
                require("nginx.nginx").proxy_rewrite()
            }
            proxy_http_version 1.1;
            proxy_pass $_url;
        }

        location /proxy_pass {
            internal;
            proxy_http_version 1.1;
            proxy_pass $_url;
        }

        # 默认错误码
        error_page 502 /response_502.json;
        location /response_502.json {
            internal;
            default_type application/json;
            return 502 '{"status":502, "message":"Bad Gateway"}';
        }
    }

    # 内部网络
    server {
        listen ${{INTERNAL_PORT}};

        # 主功能
        location / {
            default_type application/json;
            content_by_lua_block {
                require("lapis").serve("app")
            }
            set $_url "";
        }

        location /proxy {
            internal;
            rewrite_by_lua_block {
                require("nginx.nginx").proxy_rewrite()
            }
            proxy_http_version 1.1;
            proxy_pass $_url;
        }

        location /proxy_pass {
            internal;
            proxy_http_version 1.1;
            proxy_pass $_url;
        }

        # 默认错误码
        error_page 502 /response_502.json;
        location /response_502.json {
            internal;
            default_type application/json;
            return 502 '{"status":502, "message":"Bad Gateway"}';
        }
    }

    include /etc/nginx/conf.d/*.conf;

    # Don't reveal OpenResty version to clients.
    server_tokens off;
}

include /etc/nginx/conf.d/*.main;